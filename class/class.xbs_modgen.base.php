<?php
/*  XBS Modgen Module shell generator for Xoops CMS
    Copyright (C) 2006 Ashley Kitson, UK
    admin at xoobs dot net

    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/

/**
 * XBS Modgen Module shell generator for Xoops CMS
 *
 * Base class definitions
 *
 * @author     Ashley Kitson (http://xoobs.net)
 * @copyright  2006 Ashley Kitson, UK
 * @package    XBS_MODGEN
 * @subpackage Base
 * @access     public
 *
 */

use XoopsModules\Xbsmodgen\Helper;

/**
 * Require CDM objects so we can extend them
 */
require_once CDM_PATH . '/class/class.cdm.base.php';

/**
 * Module generator Object
 *
 * Object for a module to be generated by ModGen
 *
 * @author     Ashley Kitson http://akitson.bbcb.co.uk
 * @copyright  2006 Ashley Kitson, UK
 * @package    XBS_MODGEN
 * @subpackage Base
 * @version    1
 */
class ModgenObject extends CDMBaseObject
{
    /**
     * Constructor
     *
     * Overide CDMBaseObject constructor because of new initvar
     *
     */
    public function __construct()
    {
        //NB if we set row_dt as XOBJ_DTYPE_?TIME it will get converted
        // to unix datetime number format which will not work for the
        // timestamp format of the underlying data column type in mysql
        // so we set it to _OTHER so it gets left alone by cleanVars()
        $this->initVar('row_flag', XOBJ_DTYPE_OTHER, null, true, null, null, null, null, null, null);
        $this->initVar('row_uid', XOBJ_DTYPE_INT, null, true, null, null, null, null, null, null);
        $this->initVar('row_dt', XOBJ_DTYPE_OTHER, null, true, null, null, null, null, null, null);
        parent::__construct(); //call ancestor constructor
    }

    /**
     * initialize variables for the object
     *
     * Extend Ancestor to add data for form edit display
     *
     * @access public
     * @param string $key
     * @param int    $data_type     set to one of XOBJ_DTYPE_XXX constants (set to XOBJ_DTYPE_OTHER if no data type ckecking nor text sanitizing is required)
     * @param null   $value
     * @param bool   $required      require html form input?
     * @param int    $maxlength     for XOBJ_DTYPE_TXTBOX type only
     * @param string $options
     * @param string $frmName       Name of field on a form
     * @param string $frmType       Type of field on form, one of XBS_FRM_.. constants
     * @param string $frmParams     Additional parameters for form type.
     *                              frmType = XBS_FRM_DATETIME then = fld size
     *                              frmType = XBS_FRM_PASSWORD then = fld size
     *                              frmType = XBS_FRM_SELECT then = list size,multiple select eg 1,false
     *                              frmType = XBS_FRM_TEXTBOX then = fld size
     *                              frmType = XBS_FRM_TEXTAREA then = numRows,numCols e.g. 5,50
     *                              frmType = XBS_FRM_CDMSELECT then = SetName,NumRows,LangCode,DispField e.g. MYCODES,1,EN,cd_value
     *                              frmType = XBS_FRM_CDMCOUNTRY then = numRows,LangCode e.g. 1,EN
     *                              frmType = XBS_FRM_CDMCURRENCY then = numRows,LangCode e.g. 1,EN
     *                              frmType = XBS_FRM_CDMLANGUAGE then = numRows,LangCode e.g. 1,EN
     * @param string $frmValPattern regular expression to validate variable value against e.g. '/\bam[0-9]+/'
     */

    public function initVar($key, $data_type, $value = null, $required = false, $maxlength = null, $options = '', $frmName = null, $frmType = null, $frmParams = null, $frmValPattern = null)
    {
        parent::initVar($key, $data_type, $value, $required, $maxlength, $options);
        $this->vars[$key]['frmName']       = $frmName;
        $this->vars[$key]['frmType']       = $frmType;
        $this->vars[$key]['frmParams']     = $frmParams;
        $this->vars[$key]['frmValPattern'] = $frmValPattern;
    }

    /**
     * Check variables against patterns to make sure it is valid input
     * Creates error messages that are retrieved by getErrors() or getHtmlErrors()
     *
     * @return boolean True if all OK else false
     */
    public function validateData()
    {
        $ret  = true;
        $vars = $this->getVars();
        foreach ($vars as $key => $var) {
            if (null != $var['frmValPattern']) {
                if (!preg_match($var['frmValPattern'], $var['value'])) {
                    $ret = false;
                    $this->setErrors(sprintf(_AM_XBSMODGEN_ADMINERR2, $key, $var['value'], $var['frmValPattern'], get_class($this)));
                }
            }
        }//end foreach
        return $ret;
    }//end function
}//end class

/**
 * Data container class for a Modgen Module
 *
 * @package    XBS_MODGEN
 * @subpackage Base
 * @access     public
 *
 */
class xbs_modgen_Module extends ModgenObject
{
    public function __construct()
    {
        $this->initVar('id', XOBJ_DTYPE_INT, null, true, null, null, _AM_XBSMODGEN_TBL_MODID, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('modname', XOBJ_DTYPE_TXTBOX, null, true, 40, null, _AM_XBSMODGEN_TBL_MODNAME, XBS_FRM_TEXTBOX, '40', XBS_PAT_TEXT);
        $this->initVar('modtag', XOBJ_DTYPE_TXTBOX, null, true, 10, null, _AM_XBSMODGEN_TBL_MODTAG, XBS_FRM_TEXTBOX, '10', XBS_PAT_TEXT);
        $this->initVar('moddesc', XOBJ_DTYPE_TXTAREA, null, false, 40, null, _AM_XBSMODGEN_TBL_MODDESC, XBS_FRM_TEXTAREA, '5,50', XBS_PAT_TEXT);
        $this->initVar('modcredits', XOBJ_DTYPE_TXTAREA, null, false, 40, null, _AM_XBSMODGEN_TBL_MODCREDITS, XBS_FRM_TEXTAREA, '5,50', XBS_PAT_TEXT);
        $this->initVar('hasadmin', XOBJ_DTYPE_INT, 1, true, null, null, _AM_XBSMODGEN_TBL_MODHASADMIN, XBS_FRM_RADIOYN, null, XBS_PAT_BOOLINT);
        $this->initVar('hasuserside', XOBJ_DTYPE_INT, 1, true, null, null, _AM_XBSMODGEN_TBL_MODHASUSERSIDE, XBS_FRM_RADIOYN, null, XBS_PAT_BOOLINT);
        $this->initVar('hassearch', XOBJ_DTYPE_INT, 0, true, null, null, _AM_XBSMODGEN_TBL_MODHASSEARCH, XBS_FRM_RADIOYN, null, XBS_PAT_BOOLINT);
        $this->initVar('hasnotification', XOBJ_DTYPE_INT, 0, true, null, null, _AM_XBSMODGEN_TBL_MODHASNOTIFICATION, XBS_FRM_RADIOYN, null, XBS_PAT_BOOLINT);
        $this->initVar('hascomments', XOBJ_DTYPE_INT, 0, true, null, null, _AM_XBSMODGEN_TBL_MODHASCOMMENTS, XBS_FRM_RADIOYN, null, XBS_PAT_BOOLINT);
        $this->initVar('moddir', XOBJ_DTYPE_TXTBOX, null, true, 10, null, _AM_XBSMODGEN_TBL_MODDIR, XBS_FRM_TEXTBOX, '10', XBS_PAT_TEXT);
        $this->initVar('modtargetdir', XOBJ_DTYPE_TXTBOX, null, true, 255, null, _AM_XBSMODGEN_TBL_MODTARGETDIR, XBS_FRM_TEXTBOX, '50', XBS_PAT_ABSPATH);
        $this->initVar('lastgen', XOBJ_DTYPE_MTIME, null, false, null, null, _AM_XBSMODGEN_TBL_MODLASTGEN, XBS_FRM_DATETIME, null);
        //$this->initVar('fileowner',XOBJ_DTYPE_TXTBOX,null,false,30,null,_AM_XBSMODGEN_TBL_MODFOWNER,XBS_FRM_TEXTBOX,'30',XBS_PAT_TEXT);
        parent::__construct();
    }//end function

    /**
     * get contents of a script file
     *
     * @param string $infile name of file (not path)
     * @return string contents of the script
     */
    public function getScriptContents($infile)
    {
        $infile   = XBS_MODGEN_SCRIPTPATH . DIRECTORY_SEPARATOR . $infile;
        $fh       = fopen($infile, 'rb');
        $contents = fread($fh, filesize($infile));
        fclose($fh);
        return $contents;
    }

    /**
     * Write output to script
     *
     * @param text   $header  script header text
     * @param text   $content script content text
     * @param text   $footer  script footer text
     * @param string $fname   relative path and name of file to write
     */
    public function writeScriptContents($header, $content, $footer, $fname)
    {
        $fh = fopen($fname, 'wb');
        fwrite($fh, $header . "\n" . $content . "\n" . $footer);
        fclose($fh);
        @chmod($fname, 0646);
    }//end function

    /**
     * generate variable values for scripts
     *
     * @param string $scriptName name of script variables are for
     * @param string $scriptDesc description of script
     * @param string $subpackage destination subpackage name (phpDocumentor usage)
     * @access private
     * @return array populated script variables
     */
    public function genScriptVars($scriptName, $scriptDesc, $subpackage)
    {
        /**
         * @global this module configuration
         */ global $xoopsModuleConfig;

        //get the module id
        $modid = $this->getVar('id');
        //get the module tag names
        $tag  = strtoupper($this->getVar('modtag'));
        $ltag = strtolower($tag);

        include XBS_MODGEN_SCRIPTPATH . DIRECTORY_SEPARATOR . 'licenses.php';
        //xoops_version config items
        $helper     = Helper::getInstance();
        $cfgHandler = $helper->getHandler('Config');
        $cfgs       = $cfgHandler->getAllConfigs($modid);
        $c          = 0;
        $cfgline    = '';
        $cfgDef     = '';

        foreach ($cfgs as $cfg) {
            $cfgline .= "\$modversion['config'][$c]['name'] = '" . $ltag . '_cfg' . $c . "';\n";
            $cfgline .= "\$modversion['config'][$c]['title'] = '_MI_" . $tag . '_CFG' . $c . "NAME';\n";
            $cfgline .= "\$modversion['config'][$c]['description'] = '_MI_" . $tag . '_CFG' . $c . "DESC';\n";
            $cfgline .= "\$modversion['config'][$c]['formtype'] = XOBJ_DTYPE_" . $cfg->getVar('configformtype') . ";\n";
            $cfgline .= "\$modversion['config'][$c]['valuetype'] = '" . $cfg->getVar('configvaltype') . "';\n";
            $cfgline .= "\$modversion['config'][$c]['default'] = '" . $cfg->getVar('configdefault') . "';\n";
            $cfgline .= "\$modversion['config'][$c]['options'] = '" . $cfg->getVar('configoptions') . "';\n\n";

            $cfgDef .= "define('_MI_" . $tag . '_CFG' . $c . "NAME','" . $cfg->getVar('configname') . "');\n";
            $cfgDef .= "define('_MI_" . $tag . '_CFG' . $c . "DESC','" . $cfg->getVar('configdesc') . "');\n";

            $c++;
        }

        //-- Objects --
        $helper     = Helper::getInstance();
        $objHandler = $helper->getHandler('Xbsobject');

        //sql tables
        $sqlLine   = '';
        $tableLine = '';
        $tableDef  = '';
        $numObj    = $objHandler->countTypeObjects($modid, 'table');
        if ($numObj > 0) {
            $objs =& $objHandler->getTypeObjects($modid, 'table');
            $c    = 0;
            foreach ($objs as $table) {
                $tableName = $ltag . '_' . $table->getVar('objname');
                $sqlLine   .= preg_replace('/{TABLENAME}/', $tableName, $table->getVar('objoptions')) . "\n\n";
                $tableLine .= "\$modversion['tables'][$c] = '$tableName';\n";
                $tableDef  .= "/**\n* " . $table->getVar('objname') . " table\n*/\ndefine('" . $tag . '_TBL_' . strtoupper($table->getVar('objname')) . "','" . $tableName . "');\n";

                $c++;
            }
        }

        //admin menu items
        $amenuLine    = '';
        $adminMenuDef = '';
        $numObj       = $objHandler->countTypeObjects($modid, 'amenu');
        if ($numObj > 0) {
            $objs =& $objHandler->getTypeObjects($modid, 'amenu');
            $c    = 0;
            foreach ($objs as $menu) {
                $amenuLine    .= "\$adminmenu[$c]['title'] = _AM_" . $tag . "_ADMENU$c;\n";
                $amenuLine    .= "\$adminmenu[$c]['link'] = 'admin/admenu$c.php';\n";
                $adminMenuDef .= "define('_AM_" . $tag . "_ADMENU$c','" . $menu->getVar('objname') . "');\n";
                $c++;
            }
        }

        //user menu items
        $umenuLine = '';
        $defMenu   = '';
        $numObj    = $objHandler->countTypeObjects($modid, 'umenu');
        if ($numObj > 0) {
            $objs =& $objHandler->getTypeObjects($modid, 'umenu');
            $c    = 0;
            foreach ($objs as $menu) {
                $umenuLine .= "\$modversion['sub'][$c]['name'] = _MI_" . $tag . "_UMNAME$c;\n";
                $umenuLine .= "\$modversion['sub'][$c]['url'] = 'umenu$c.php';\n";
                $defMenu   .= "define('_MI_" . $tag . '_UMNAME' . $c . "','" . $menu->getVar('objname') . "');\n";
                $c++;
            }
        }

        //blocks
        $blocks    = '';
        $defBlocks = '';
        $numObj    = $objHandler->countTypeObjects($modid, 'bscript');
        if ($numObj > 0) {
            $objs =& $objHandler->getTypeObjects($modid, 'bscript');
            $c    = 0;
            foreach ($objs as $blk) {
                $blocks .= "\$modversion['blocks'][$c]['name'] = _MI_" . $tag . "_BLKNAME$c;\n";
                $blocks .= "\$modversion['blocks'][$c]['description'] = _MI_" . $tag . "_BLKDESC$c;\n";
                $blocks .= "\$modversion['blocks'][$c]['file'] = 'block$c.php';\n";
                $blocks .= "\$modversion['blocks'][$c]['show_func'] = 'b_" . $ltag . '_block' . $c . "_show';\n";
                $blocks .= "\$modversion['blocks'][$c]['edit_func'] = 'b_" . $ltag . '_block' . $c . "_edit';\n";
                $blocks .= "\$modversion['blocks'][$c]['template'] = 'b_" . $ltag . '_block' . $c . ".tpl';\n";
                //get any block options and retrieve the value parts
                $opts = $blk->getVar('objoptions');
                if (empty($opts)) {
                    $opts = '';
                } else {
                    $optArr = explode('|', $opts);
                    $opts   = '';
                    foreach ($optArr as $value) {
                        $val  = explode('=', $value);
                        $opts .= $val[1] . '|';
                    }
                    $opts = rtrim($opts, '|');
                }
                $blocks    .= "\$modversion['blocks'][$c]['options'] = '$opts';\n";
                $defBlocks .= "define('_MI_" . $tag . '_BLKNAME' . $c . "','" . $blk->getVar('objname') . "');\n";
                $defBlocks .= "define('_MI_" . $tag . '_BLKDESC' . $c . "','" . $blk->getVar('objdesc') . "');\n";
                $c++;
            }
        }

        //XBS MetaTags
        $metatagline = '';
        $metatagline .= "\$metatags[$c]['module'] = '" . strtoupper($this->getVar('modtag')) . "';\n";
        $metatagline .= "\$metatags[$c]['title'] = 'View values for a code set';\n";
        $metatagline .= "\$metatags[$c]['description'] = 'Allow users to review CDM codes by codeset';\n";
        $metatagline .= "\$metatags[$c]['script_name'] = 'index.php';\n";
        $metatagline .= "\$metatags[$c]['keywords'] = '';\n";
        $metatagline .= "\$metatags[$c]['maxkeys'] = 40;\n";
        $metatagline .= "\$metatags[$c]['minkeylen'] = 5;\n";
        $metatagline .= "\$metatags[$c]['config'] = 'mostorder';\n\n";

        //construct replacement array
        $repl = [
            '{!SCRIPTNAME}'    => $scriptName,
            '{!DATETIME}'      => $this->getCurrentDateTime(),
            '{MODNAME}'        => $this->getVar('modname'),
            '{MODDESC}'        => $this->getVar('moddesc'),
            '{MODDIR}'         => $this->getVar('moddir'),
            '{UMODDIR}'        => strtoupper($this->getVar('moddir')),
            '{UMODTAG}'        => $tag,
            '{LMODTAG}'        => $ltag,
            '{COPYRIGHT}'      => date('Y') . ' ' . $xoopsModuleConfig['xbs_modgen_author'] . ', ' . $xoopsModuleConfig['xbs_modgen_country'],
            '{CONTACT}'        => $xoopsModuleConfig['xbs_modgen_contact'],
            '{LICENSE}'        => $xoopsModuleConfig['xbs_modgen_license'],
            '{LICENSETEXT}'    => 'GPL' == $xoopsModuleConfig['xbs_modgen_license'] ? $gpl : $lgpl,
            '{!SCRIPTDESC}'    => $scriptDesc,
            '{AUTHOR}'         => $xoopsModuleConfig['xbs_modgen_author'],
            '{AUTHURL}'        => $xoopsModuleConfig['xbs_modgen_authurl'],
            '{!PACKAGE}'       => $tag,
            '{!SUBPACKAGE}'    => $subpackage,
            '{!XCFGTABLES}'    => $tableLine,
            '{!XCFGUSERMENU}'  => $umenuLine,
            '{!XCFGADMINMENU}' => $amenuLine,
            '{!XCFGCONFIG}'    => $cfgline,
            '{HASUSERMENU}'    => $this->getVar('hasuserside'),
            '{HASADMINMENU}'   => $this->getVar('hasadmin'),
            '{HASSEARCH}'      => $this->getVar('hassearch'),
            '{HASCOMMENTS}'    => $this->getVar('hascomments'),
            '{HASNOTIFY}'      => $this->getVar('hasnotification'),
            '{!METATAGS}'      => $metatagline,
            '{!SQL}'           => $sqlLine,
            '{!DEFTABLES}'     => $tableDef,
            '{!DEFADMMENU}'    => $adminMenuDef,
            '{!YEAR}'          => date('Y'),
            '{!DEFCONFIG}'     => $cfgDef,
            '{!DEFMENU}'       => $defMenu,
            '{!XCFGBLOCKS}'    => $blocks,
            '{!DEFBLOCKS}'     => $defBlocks,
        ];

        return $repl;
    }

    /**
     * Change script specific values for replacement variable array
     *
     * @param        $vars
     * @param string $scriptName name of script variables are for
     * @param        $scriptDesc
     * @param string $subpackage destination subpackage name (phpDocumentor usage)
     * @param int    $counter    a number counter
     * @return void populated script variables
     * @access private
     */
    public function genChangeVars(&$vars, $scriptName, $scriptDesc, $subpackage, $counter = 0)
    {
        $vars['{!SCRIPTNAME}'] = $scriptName;
        $vars['{!SCRIPTDESC}'] = $scriptDesc;
        $vars['{!SUBPACKAGE}'] = $subpackage;
        $vars['{!COUNTER}']    = $counter;
    }

    /**
     * Replace script variables with actual values
     *
     * @param text  $content script raw text
     * @param array $vars    replacement values
     * @return string instantiated script text
     * @access private
     */
    public function genReplaceVars($content, $vars)
    {
        $search  = [];
        $replace = [];
        foreach ($vars as $key => $value) {
            $search[]  = "/$key/";
            $replace[] = $value;
        }
        return preg_replace($search, $replace, $content);
    }//end function

    /**
     * generate header of a script
     *
     * @param array $repl Replacement script variable array
     * @access private
     * @return string header text
     */
    public function genHeader($repl)
    {
        $contents = $this->getScriptContents('scriptheader.scr');
        return $this->genReplaceVars($contents, $repl);
    }//end function

    /**
     * generate footer of script
     * @return string footer text
     * @access private
     */
    public function genFooter()
    {
        return "/*\n * This file was generated by XBS ModGen, (c) 2006 A Kitson, UK. See http://xoobs.net\n * ModGen is a Module Code Generator for the Xoops CMS.  See http://xoops.org\n */\n?>";
    }//end function

    /**
     * Generate module scripts
     *
     */
    public function generate()
    {
        /**
         * @global module configuration
         */ global $xoopsModuleConfig;
        /**
         * @global Xoops database object
         */ global $xoopsDB;

        //check for script target directory and create if not already existing
        $targetDir = $this->getVar('modtargetdir') . DIRECTORY_SEPARATOR . $this->getVar('moddir');
        if (is_dir($this->getVar('modtargetdir'))) {
            if (!is_dir($targetDir)) {
                //create directory
                if (!mkdir($targetDir, 0757)) {
                    return 2; //unable to create directory
                }
            }
            //find language name
            $sql = 'SELECT conf_id FROM ' . $xoopsDB->prefix('config') . " WHERE conf_name = 'xbs_modgen_lang'";
            if ($result = $xoopsDB->query($sql)) {
                $ret = $xoopsDB->fetchArray($result);
                $sql = 'SELECT confop_name FROM ' . $xoopsDB->prefix('configoption') . ' WHERE conf_id = ' . $ret['conf_id'] . ' AND confop_value = ' . $xoopsDB->quoteString($xoopsModuleConfig['xbs_modgen_lang']);
                if ($result = $xoopsDB->query($sql)) {
                    $ret  = $xoopsDB->fetchArray($result);
                    $ret  = explode(' ', $ret['confop_name']);
                    $lang = strtolower($ret[count($ret) - 1]);
                } else {
                    $lang = 'english'; //default value
                }
            }

            //create subdirectories
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'admin', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'images', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'blocks', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'class', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'docs', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'include', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'images', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'shots', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'language', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR . $lang, 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'sql', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'templates', 0757);
            @mkdir($targetDir . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'blocks', 0757);

            //module objecthandler
            $helper     = Helper::getInstance();
            $objHandler = $helper->getHandler('Xbsobject');

            /* Script generation - root directory */
            $footer   = $this->genFooter();
            $replVars = $this->genScriptVars('xoops_version.php', _AM_XBSMODGEN_SCR_XVERDESC, 'Installation');

            //xoops_version.php
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('xoops_version.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'xoops_version.php');

            //metatags_info.php
            $this->genChangeVars($replVars, 'metatags_info.php', _AM_XBSMODGEN_SCR_MTAGDESC, 'Installation');
            $content = $this->genReplaceVars($this->getScriptContents('metatags_info.scr'), $replVars);
            $this->writeScriptContents('', $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'metatags_info.php');

            //install_funcs.php
            $this->genChangeVars($replVars, 'install_funcs.php', _AM_XBSMODGEN_SCR_INSTDESC, 'Installation');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('install_funcs.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'install_funcs.php');

            //header.php
            $this->genChangeVars($replVars, 'header.php', _AM_XBSMODGEN_SCR_HEADDESC, 'Main');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('header.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'header.php');

            //If there is a userside for the module then create an index.php file
            if (1 == (int)$this->getVar('hasuserside')) {
                $this->genChangeVars($replVars, 'index.php', _AM_XBSMODGEN_SCR_UINDXDESC, 'User_Function');
                $header  = $this->genHeader($replVars);
                $content = $this->genReplaceVars($this->getScriptContents('umenu.scr'), $replVars);
                $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'index.php');
            }
            //user menu scripts - one per option
            if ($objHandler->countTypeObjects($this->getVar('id'), 'umenu') > 0) {
                $objs =& $objHandler->getTypeObjects($this->getVar('id'), 'umenu');
                $c    = 0;
                foreach ($objs as $menu) {
                    $menuName = "umenu$c.php";
                    $this->genChangeVars($replVars, $menuName, sprintf(_AM_XBSMODGEN_SCR_UMENUDESC, $menu->getVar('objdesc')), 'User_Function');
                    $header  = $this->genHeader($replVars);
                    $content = $this->genReplaceVars($this->getScriptContents('umenu.scr'), $replVars);
                    $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . $menuName);
                    $c++;
                }
            }//end if

            //block scripts - one per block definition
            // also block template - one per block definition
            if ($objHandler->countTypeObjects($this->getVar('id'), 'bscript') > 0) {
                $objs =& $objHandler->getTypeObjects($this->getVar('id'), 'bscript');
                $c    = 0;
                foreach ($objs as $block) {
                    //block script
                    $blockName = "block$c.php";
                    $this->genChangeVars($replVars, $blockName, sprintf(_AM_XBSMODGEN_SCR_BLOCKDESC, $block->getVar('objdesc')), 'Blocks', $c);
                    $header  = $this->genHeader($replVars);
                    $content = $this->genReplaceVars($this->getScriptContents('block.scr'), $replVars);
                    $this->writeScriptContents($header, $content, $footer, $targetDir . DIRECTORY_SEPARATOR . 'blocks' . DIRECTORY_SEPARATOR . $blockName);
                    //block template
                    $content = $this->genReplaceVars($this->getScriptContents('mytemplate.scr'), $replVars);
                    $this->writeScriptContents('', $content, '', $targetDir . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'blocks' . DIRECTORY_SEPARATOR . 'b_' . strtolower($this->getVar('modtag')) . '_block' . $c . '.tpl');
                    $c++;
                }
            }//end if

            /* Script generation - sql directory */
            //$this->genChangeVars($replVars,'','','');
            $content = $this->genReplaceVars($this->getScriptContents('sql.scr'), $replVars);
            $content = preg_replace("/<br \/>/", "\n", $content);
            $content = preg_replace('/&#039;/', "'", $content);
            $this->writeScriptContents('', $content, '', $targetDir . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR . $replVars['{LMODTAG}'] . '_mysql.sql');

            /* Script generation - language directory */
            $langDir = $targetDir . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR . $lang . DIRECTORY_SEPARATOR;

            //admin.php
            $this->genChangeVars($replVars, 'admin.php', _AM_XBSMODGEN_SCR_ADMINDESC, 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('admin.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $langDir . 'admin.php');

            //admin2.php
            $this->genChangeVars($replVars, 'admin2.php', _AM_XBSMODGEN_SCR_ADMIN2DESC, 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->getScriptContents('admin2.scr');
            $this->writeScriptContents($header, $content, $footer, $langDir . 'admin2.php');

            //main.php
            $this->genChangeVars($replVars, 'main.php', '', 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('main.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $langDir . 'main.php');

            //modinfo.php
            $this->genChangeVars($replVars, 'modinfo.php', '', 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('modinfo.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $langDir . 'modinfo.php');

            //blocks.php
            $this->genChangeVars($replVars, 'blocks.php', '', 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('blocklang.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $langDir . 'blocks.php');

            /* Script generation - include directory */
            $incDir = $targetDir . DIRECTORY_SEPARATOR . 'include' . DIRECTORY_SEPARATOR;
            //defines.php
            $this->genChangeVars($replVars, 'defines.php', _AM_XBSMODGEN_SCR_DEFINESDESC, 'Definitions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('defines.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $incDir . 'defines.php');

            //functions.php
            $this->genChangeVars($replVars, 'functions.php', _AM_XBSMODGEN_SCR_UFUNCDESC, 'API_Functions');
            $header  = $this->genHeader($replVars);
            $content = $this->getScriptContents('ufunctions.scr');
            $this->writeScriptContents($header, $content, $footer, $incDir . 'functions.php');

            //notification.php
            $this->genChangeVars($replVars, 'notification.php', _AM_XBSMODGEN_SCR_NOTIFYDESC, 'Xoops_Integration');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('notification.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $incDir . 'notification.php');

            //comments.php
            $this->genChangeVars($replVars, 'comments.php', _AM_XBSMODGEN_SCR_COMMENTSDESC, 'Xoops_Integration');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('comments.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $incDir . 'comments.php');

            //search.php
            $this->genChangeVars($replVars, 'search.php', _AM_XBSMODGEN_SCR_SEARCHDESC, 'Xoops_Integration');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('search.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $incDir . 'search.php');

            /* Script generation - admin directory */
            $adminDir = $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR;
            //adminindex.php
            if (1 == $this->getVar('hasadmin')) {
                $this->genChangeVars($replVars, 'adminindex.php', _AM_XBSMODGEN_SCR_AINDXDESC, 'Admin');
                $header  = $this->genHeader($replVars);
                $content = $this->genReplaceVars($this->getScriptContents('adminindex.scr'), $replVars);
                $this->writeScriptContents($header, $content, $footer, $adminDir . 'adminindex.php');
            }

            //menu.php
            $this->genChangeVars($replVars, 'menu.php', _AM_XBSMODGEN_SCR_AMENUDESC, 'Admin');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('menu.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $adminDir . 'menu.php');

            //functions.php
            $this->genChangeVars($replVars, 'functions.php', _AM_XBSMODGEN_SCR_AFUNCDESC, 'API_Functions');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('afunctions.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $adminDir . 'functions.php');

            //adminmenus - one per option
            if ($objHandler->countTypeObjects($this->getVar('id'), 'amenu') > 0) {
                $objs =& $objHandler->getTypeObjects($this->getVar('id'), 'amenu');
                $c    = 0;
                foreach ($objs as $menu) {
                    $menuName = "admenu$c.php";
                    $this->genChangeVars($replVars, $menuName, sprintf(_AM_XBSMODGEN_SCR_AMENU2DESC, $menu->getVar('objdesc')), 'Admin_Function', $c);
                    $header  = $this->genHeader($replVars);
                    $content = $this->genReplaceVars($this->getScriptContents('amenu.scr'), $replVars);
                    $this->writeScriptContents($header, $content, $footer, $adminDir . $menuName);
                    $c++;
                }
            }//end if

            //help.php
            $this->genChangeVars($replVars, 'help.php', _AM_XBSMODGEN_SCR_HELPDESC, 'Help');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('help.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $adminDir . 'help.php');

            //adminheader.php
            $this->genChangeVars($replVars, 'adminheader,inc', _AM_XBSMODGEN_SCR_ADHEADDESC, 'Admin');
            $header  = $this->genHeader($replVars);
            $content = $this->genReplaceVars($this->getScriptContents('adminheader.scr'), $replVars);
            $this->writeScriptContents($header, $content, $footer, $adminDir . 'adminheader.php');

            //mytemplate.tpl
            $content = $this->genReplaceVars($this->getScriptContents('mytemplate.scr'), $replVars);
            $this->writeScriptContents('', $content, '', $targetDir . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'mytemplate.tpl');

            /* Copy standard files */
            //logo
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'slogo.png', $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . $replVars['{LMODTAG}'] . '_slogo.png');
            @chmod($targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . $replVars['{LMODTAG}'] . '_slogo.png', 0646);

            //admin images
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'left_both.gif', $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'left_both.gif');
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'right_both.gif', $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'right_both.gif');
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'bg.gif', $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'bg.gif');
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'left_both.gif', $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'left_both.gif');
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'right_both.gif', $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'right_both.gif');
            copy('..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'bg.gif', $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'bg.gif');

            //index.html to every directory
            $ifname = '..' . DIRECTORY_SEPARATOR . 'resources' . DIRECTORY_SEPARATOR . 'index.html';
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'blocks' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'class' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'docs' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'include' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $langDir . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR . 'index.html');
            copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR . 'index.html');
            if (1 != (int)$this->getVar('hasuserside')) {
                copy($ifname, $targetDir . DIRECTORY_SEPARATOR . 'index.html');
            }
        } else {
            return 1; //no target directory
        }
        return 0; //All OK
    }//end function
}//end class

/**
 * Data container class for a Modgen Configuration Record
 *
 * @package    XBS_MODGEN
 * @subpackage Base
 * @access     public
 *
 */
class xbs_modgen_Config extends ModgenObject
{
    public function __construct()
    {
        $this->initVar('modid', XOBJ_DTYPE_INT, null, true, null, null, _AM_XBSMODGEN_TBL_CFGMODID, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('id', XOBJ_DTYPE_INT, null, true, null, null, _AM_XBSMODGEN_TBL_CFGID, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('configname', XOBJ_DTYPE_TXTBOX, null, true, 30, null, _AM_XBSMODGEN_TBL_CFGNAME, XBS_FRM_TEXTBOX, '30', XBS_PAT_TEXT);
        $this->initVar('configdesc', XOBJ_DTYPE_TXTBOX, null, false, 255, null, _AM_XBSMODGEN_TBL_CFGDESC, XBS_FRM_TEXTBOX, '50', XBS_PAT_TEXT);
        $this->initVar('configformtype', XOBJ_DTYPE_TXTBOX, 'TXTBOX', true, 6, null, _AM_XBSMODGEN_TBL_CFGFTYPE, XBS_FRM_CDMSELECT, 'XOBJDTYPE,1,EN,cd_value');
        $this->initVar('configvaltype', XOBJ_DTYPE_TXTBOX, 'text', true, 6, null, _AM_XBSMODGEN_TBL_CFGFVAL, XBS_FRM_CDMSELECT, 'XOBJVTYPE,1,EN,cd_value');
        $this->initVar('configlen', XOBJ_DTYPE_INT, '30', false, 3, null, _AM_XBSMODGEN_TBL_CFGFLEN, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('configdefault', XOBJ_DTYPE_TXTBOX, null, false, 60, null, _AM_XBSMODGEN_TBL_CFGFDEF, XBS_FRM_TEXTBOX, '30', null);
        $this->initVar('configoptions', XOBJ_DTYPE_TXTAREA, null, false, null, null, _AM_XBSMODGEN_TBL_CFGFOPT, XBS_FRM_TEXTAREA, '5,50', null);

        parent::__construct();
    }//end function
}//end class

/**
 * Data container class for a Modgen Object
 *
 * @package    XBS_MODGEN
 * @subpackage Base
 * @access     public
 *
 */
class xbs_modgen_Object extends ModgenObject
{
    /**
     * constructor
     *
     */
    public function __construct()
    {
        //objects don't have form field names set here as they are set
        //dynamically for each usage of the the object
        $this->initVar('modid', XOBJ_DTYPE_INT, null, true, null, null, null, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('id', XOBJ_DTYPE_INT, null, true, null, null, null, XBS_FRM_TEXTBOX, '10', XBS_PAT_INT);
        $this->initVar('objtype', XOBJ_DTYPE_TXTBOX, null, true, 10, null, null, XBS_FRM_CDMSELECT, 'XOBJOTYPE,1,EN,cd_value', '/^(u|b|a)(script|tpl)|doc(help|install|system)|table|(u|a)menu$/');
        $this->initVar('objname', XOBJ_DTYPE_TXTBOX, null, true, 30, null, null, XBS_FRM_TEXTBOX, '30', null);
        $this->initVar('objdesc', XOBJ_DTYPE_TXTAREA, null, false, 255, null, null, XBS_FRM_TEXTAREA, '5,50', XBS_PAT_TEXT);
        $this->initVar('objloc', XOBJ_DTYPE_TXTBOX, null, true, 30, null, null, XBS_FRM_TEXTBOX, '30', "/^\/[._a-zA-Z\/]*$/");
        $this->initVar('objoptions', XOBJ_DTYPE_TXTAREA, null, false, null, null, null, XBS_FRM_TEXTAREA, '5,50');
        parent::__construct();
    }//end function

    /**
     * Set form names for object
     *
     * @param array $fNames array of names for each form field to display in format (fld => fldName..)
     */
    public function useFormNames($fNames)
    {
        foreach ($fNames as $key => $value) {
            $this->vars[$key]['frmName'] = $value;
        }
    }//end function
}//end class

/**
 * Object handler for xbs_modgen objects
 *
 * @package    XBS_MODGEN
 * @subpackage Base
 * @abstract
 */
class xbs_modgen_BaseHandler extends XoopsObjectHandler
{
    // Public Variables
    /**
     * Set in descendent constructor to name of object that this handler handles
     * @var string
     */
    public $classname;
    /**
     * Set in ancestor to name of unique ID generator tag for use with insert function
     * @var string
     */
    public $ins_tagname;
    // Private variables
    /**
     * most recent error number
     * @access private
     * @var int
     */
    public $_errno = 0;
    /**
     * most recent error string
     * @access private
     * @var string
     */
    public $_error = '';

    /**
     * Constructor
     *
     * @param xoopsDatabase &$db handle for xoops database object
     */
    public function __construct($db)
    {
        parent::__construct($db);
    }

    /**
     * Set error information
     *
     * @param int    $errnum =0 Error number
     * @param string $errstr ='' Error Message
     */
    public function setError($errnum = 0, $errstr = '')
    {
        $this->_errno = $errnum;
        $this->_error = $errstr;
    }

    /**
     * Return last error number
     *
     * @return int
     */
    public function errno()
    {
        return $this->_errno;
    }

    /**
     * Return last error message
     *
     * @return  string
     */
    public function error()
    {
        return $this->_error;
    }

    /**
     * return last error number and message
     *
     * @return string
     */
    public function getError()
    {
        $e = 'Error No ' . (string)$this->_errno . ' - ' . $this->_error;
        return $e;
    }

    /**
     * Must be overidden in ancestor to return a new object of the required kind
     *
     * @abstract
     * @return bool or False if no object created
     */
    public function _create()
    {
        //return new object() - descendent of XoopsObject
        return false;
    }

    /**
     * Create a new object
     *
     * Relies on _create to create the actual object
     *
     * @param boolean $isNew =true create a new object and tell it is new.  If False then create object but set it as not new
     * @return object else False if failure
     */
    public function create($isNew = true)
    {
        $obj =& $this->_create();
        if ($isNew && $obj) { //if it is new and the object was created
            $obj->setNew();
            $obj->unsetDirty();
        } else {
            if ($obj) {         //it is not new (forced by caller, usually &getall()) but obj was created
                $obj->unsetNew();
                $obj->unsetDirty();
            } else {
                $this->setError(-1, sprintf(_MD_xbs_modgen_ERR_2, $classname));
                return false;      //obj was not created so return False to caller.
            }
        }
        return $obj;
    }// end create function

    /**
     * Get data from the database and create a new object with it
     *
     * Abstract method. Overide in ancestor and supply the sql string to get the data
     *
     * @abstract
     * @param int $id internal id of the object. Internal code is a unique int value.
     * @return  string SQL string to get data
     */
    public function _get($id)
    { //overide in ancestor and supply the sql string to get the data
        return '';
    }

    /**
     * Get data for object given id.
     *
     * @param int $id data item internal identifier
     * @return object
     */
    public function get($id)
    {
        $test = (is_int($id) ? ($id > 0 ? true : false) : !empty($id) ? true : false); //test validity of id
        //    $id = intval($id);
        if ($test) {
            $obj =& $this->create(false);
            if ($obj) {
                $sql = $this->_get($id);

                if ($result = $this->db->query($sql)) {
                    if (1 == $this->db->getRowsNum($result)) {
                        $obj->assignVars($this->db->fetchArray($result));
                        return $obj;
                    } else {
                        $this->setError(-1, sprintf(_MD_xbs_modgen_ERR_1, (string)$id));
                    }
                } else {
                    $this->setError($this->db->errno(), $this->db->error());
                }//end if
            }//end if - error value set in call to create()
        } else {
            $this->setError(-1, sprintf(_MD_xbs_modgen_ERR_1, (string)$id));
        }//end if
        return false; //default return
    }//end function &get

    /**
     * Get internal identifier (primary key) based on user visible code
     *
     * overide in ancestor to return the identifier
     *
     * @abstract
     * @param mixed Dependent on descendent class
     * @return object of required type
     */
    public function getKey()
    {
        return null;
    }

    /**
     * OVERIDE in ancestor to provide an INSERT string for insert function
     *
     * Use the following construct inside your descendent to get data for the
     * SQL string
     * <code>
     * extract($cleanVars);
     * </code>
     * @abstract
     * @param $cleanVars array of key=>value pairs of data for insert string
     * @return string SQL string to insert object data into database
     *
     */
    public function _ins_insert($cleanVars)
    {
        return '';
    }

    /**
     * OVERIDE in ancestor to provide an UPDATE string for insert function
     *
     * Use the following construct inside your descendent to get data for the
     * SQL string
     * <code>
     * extract($cleanVars);
     * </code>
     * @abstract
     * @param $cleanVars array of key=>value pairs of data for insert string
     * @return string SQL string to update object data into database
     */
    public function _ins_update($cleanVars)
    {
        return '';
    }

    /**
     * Write an object back to the database
     *
     * Overide in ancestor only if you need to add extra process
     * before or after the insert.
     *
     * @param \XoopsObject $obj
     * @return  bool             True if successful
     */

    public function insert(XoopsObject $obj)
    {
        if (!$obj->isDirty()) {
            return true;
        }    // if data is untouched then don't save
        // Set default values
        $obj->setRowInfo(); //set row edit infos ** you MUST call this prior to an update and prior to cleanVars**

        if ($obj->isNew()) {
            $obj->setVar('row_flag', xbs_modgen_RSTAT_ACT); //its a new code so it is 'Active'
            //next line not really required for mysql, but left in for future compatibility
            $obj->setVar('id', $this->db->genId($this->ins_tagname));
        }
        // set up 'clean' 2 element array of data items k=>v
        if (!$obj->cleanVars()) {
            return false;
        }
        //get the sql for insert or update
        $sql = ($obj->isNew() ? $this->_ins_insert($obj->cleanVars) : $this->_ins_update($obj->cleanVars));
        if (!$result = $this->db->queryF($sql)) {
            $this->setError($this->db->errno(), $this->db->error());
            return false;
        } else {
            $obj->unsetDirty(); //It has been saved so now it is clean
        }

        if ($obj->isNew()) { //retrieve the new internal id for the code and store
            $id = $this->db->getInsertId();
            $obj->setVar('id', $id);
            $obj->unsetNew();  //it's been saved so it's not new anymore
        }

        return true;
    }//end function insert

    /**
     * return SQL string to delete object from database
     *
     * OVERIDE in ancestor to provide an UPDATE string for insert function
     * Use the following construct inside your descendent to get data for the
     * SQL string
     * <code>
     * extract($cleanVars);
     * </code>
     *
     * @abstract
     * @param $cleanVars array of key=>value pairs of data for insert string
     * @return string SQL string to update object data into database
     */
    public function _delete($cleanVars)
    {
        return '';
    }//end function

    /**
     * Delete object from the database
     *
     * @param \XoopsObject $obj
     * @return bool TRUE on success else False
     */
    public function delete(XoopsObject $obj)
    {
        if (!$obj->cleanVars()) {
            return false;
        }
        $sql = $this->_delete($obj->cleanVars);
        if (!$this->db->queryF($sql)) {
            $this->setError($this->db->errno(), $this->db->error());
            return false;
        } else {
            return true;
        }
    }//end function
} //end of class xbs_modgen_BaseHandler

