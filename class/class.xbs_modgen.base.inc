<?php
/*  XBS Modgen Module shell generator for Xoops CMS
    Copyright (C) 2006 Ashley Kitson, UK
    admin at xoobs dot net

    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/
/**
 * XBS Modgen Module shell generator for Xoops CMS
 * 
 * Base class definitions
 * 
 * @author Ashley Kitson (http://xoobs.net)
 * @copyright 2006 Ashley Kitson, UK
 * @package XBS_MODGEN
 * @subpackage Base
 * @access public
 * 
 */
/**
* Require CDM objects so we can extend them
*/
require_once CDM_PATH."/class/class.cdm.base.php";

/**
* Module generator Object 
*
* Object for a module to be generated by ModGen
*
* @author Ashley Kitson http://akitson.bbcb.co.uk
* @copyright 2006 Ashley Kitson, UK
* @package XBS_MODGEN
* @subpackage Base
* @version 1 
*/
class ModgenObject extends CDMBaseObject {
	
	/**
	 * Constructor
	 * 
	 * Overide CDMBaseObject constructor because of new initvar
	 *
	 * @return ModgenObject
	 */
	function ModgenObject() {
	    //NB if we set row_dt as XOBJ_DTYPE_?TIME it will get converted
	    // to unix datetime number format which will not work for the
	    // timestamp format of the underlying data column type in mysql
	    // so we set it to _OTHER so it gets left alone by cleanVars()
	    $this->initVar('row_flag',XOBJ_DTYPE_OTHER,null,TRUE,null,null,null,null,null,null);
	    $this->initVar('row_uid',XOBJ_DTYPE_INT,null,TRUE,null,null,null,null,null,null);
	    $this->initVar('row_dt',XOBJ_DTYPE_OTHER,null,TRUE,null,null,null,null,null,null);   
	    $this->xoopsObject(); //call ancestor constructor 		
	}
	
    /**
    * initialize variables for the object
    * 
    * Extend Ancestor to add data for form edit display
    * 
    * @access public
    * @param string $key
    * @param int $data_type  set to one of XOBJ_DTYPE_XXX constants (set to XOBJ_DTYPE_OTHER if no data type ckecking nor text sanitizing is required)
    * @param mixed
    * @param bool $required  require html form input?
    * @param int $maxlength  for XOBJ_DTYPE_TXTBOX type only
    * @param string $option  does this data have any select options? Must be set if $frmType = XBS_FRM_CHECKBOX, XBS_FRM_SELECT
    * @param string $frmName Name of field on a form
    * @param string $frmType Type of field on form, one of XBS_FRM_.. constants
    * @param string $frmParams Additional parameters for form type.  
    * frmType = XBS_FRM_DATETIME then = fld size
    * frmType = XBS_FRM_PASSWORD then = fld size
    * frmType = XBS_FRM_SELECT then = list size,multiple select eg 1,false
    * frmType = XBS_FRM_TEXTBOX then = fld size
    * frmType = XBS_FRM_TEXTAREA then = numRows,numCols e.g. 5,50
    * frmType = XBS_FRM_CDMSELECT then = SetName,NumRows,LangCode,DispField e.g. MYCODES,1,EN,cd_value
    * frmType = XBS_FRM_CDMCOUNTRY then = numRows,LangCode e.g. 1,EN
    * frmType = XBS_FRM_CDMCURRENCY then = numRows,LangCode e.g. 1,EN
    * frmType = XBS_FRM_CDMLANGUAGE then = numRows,LangCode e.g. 1,EN
    * @param string $frmValPattern regular expression to validate variable value against e.g. '/\bam[0-9]+/'
    */
    function initVar($key, $data_type, $value = null, $required = false, $maxlength = null, $options = '', $frmName, $frmType, $frmParams, $frmValPattern=null)
    {
    	parent::initVar($key, $data_type, $value, $required, $maxlength, $options);
        $this->vars[$key]['frmName'] = $frmName;
        $this->vars[$key]['frmType'] = $frmType;
        $this->vars[$key]['frmParams'] = $frmParams;
        $this->vars[$key]['frmValPattern'] = $frmValPattern;
    }
    
    /**
     * Check variables against patterns to make sure it is valid input
     * Creates error messages that are retrieved by getErrors() or getHtmlErrors()
     *
     * @return boolean True if all OK else false
     */
    function validateData() {
    	$ret = true;
    	$vars = $this->getVars();
    	foreach ($vars as $key => $var) {
    		if ($var['frmValPattern']!=null) {
    			if (!preg_match($var['frmValPattern'],$var['value'])) {
    				$ret = false;
    				$this->setErrors(sprintf(_AM_XBS_MODGEN_ADMINERR2,$key,$var['value'],$var['frmValPattern'],get_class($this)));
    			}
    		}
    	}//end foreach
    	return $ret;
    }//end function
    
}//end class

/**
 * Data container class for a Modgen Module
 * 
 * @package XBS_MODGEN
 * @subpackage Base
 * @access public
 *
 */
class xbs_modgen_Module extends ModgenObject {
	function xbs_modgen_Module() {
		$this->initVar('id',XOBJ_DTYPE_INT,null,true,null,null,_AM_XBS_MODGEN_TBL_MODID,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
		$this->initVar('modname',XOBJ_DTYPE_TXTBOX,null,true,40,null,_AM_XBS_MODGEN_TBL_MODNAME,XBS_FRM_TEXTBOX,'40',XBS_PAT_TEXT);
		$this->initVar('modtag',XOBJ_DTYPE_TXTBOX,null,true,10,null,_AM_XBS_MODGEN_TBL_MODTAG,XBS_FRM_TEXTBOX,'10',XBS_PAT_TEXT);
		$this->initVar('moddesc',XOBJ_DTYPE_TXTAREA,null,false,40,null,_AM_XBS_MODGEN_TBL_MODDESC,XBS_FRM_TEXTAREA,'5,50',XBS_PAT_TEXT);
		$this->initVar('modcredits',XOBJ_DTYPE_TXTAREA,null,false,40,null,_AM_XBS_MODGEN_TBL_MODCREDITS,XBS_FRM_TEXTAREA,'5,50',XBS_PAT_TEXT);
		$this->initVar('hasadmin',XOBJ_DTYPE_INT,1,true,null,null,_AM_XBS_MODGEN_TBL_MODHASADMIN,XBS_FRM_RADIOYN,null,XBS_PAT_BOOLINT);
		$this->initVar('hasuserside',XOBJ_DTYPE_INT,1,true,null,null,_AM_XBS_MODGEN_TBL_MODHASUSERSIDE,XBS_FRM_RADIOYN,null,XBS_PAT_BOOLINT);
		$this->initVar('hassearch',XOBJ_DTYPE_INT,0,true,null,null,_AM_XBS_MODGEN_TBL_MODHASSEARCH,XBS_FRM_RADIOYN,null,XBS_PAT_BOOLINT);
		$this->initVar('hasnotification',XOBJ_DTYPE_INT,0,true,null,null,_AM_XBS_MODGEN_TBL_MODHASNOTIFICATION,XBS_FRM_RADIOYN,null,XBS_PAT_BOOLINT);
		$this->initVar('hascomments',XOBJ_DTYPE_INT,0,true,null,null,_AM_XBS_MODGEN_TBL_MODHASCOMMENTS,XBS_FRM_RADIOYN,null,XBS_PAT_BOOLINT);
		$this->initVar('moddir',XOBJ_DTYPE_TXTBOX,null,true,10,null,_AM_XBS_MODGEN_TBL_MODDIR,XBS_FRM_TEXTBOX,'10',XBS_PAT_TEXT);
		$this->initVar('modtargetdir',XOBJ_DTYPE_TXTBOX,null,true,255,null,_AM_XBS_MODGEN_TBL_MODTARGETDIR,XBS_FRM_TEXTBOX,'50',XBS_PAT_ABSPATH);
		$this->initVar('lastgen',XOBJ_DTYPE_MTIME,null,false,null,null,_AM_XBS_MODGEN_TBL_MODLASTGEN,XBS_FRM_DATETIME,null);
		//$this->initVar('fileowner',XOBJ_DTYPE_TXTBOX,null,false,30,null,_AM_XBS_MODGEN_TBL_MODFOWNER,XBS_FRM_TEXTBOX,'30',XBS_PAT_TEXT);
		parent::ModgenObject();
	}//end function
	
	/**
	 * get contents of a script file
	 *
	 * @param string $infile name of file (not path)
	 * @return string contents of the script
	 */
	function getScriptContents($infile) {
		$infile = XBS_MODGEN_SCRIPTPATH.DIRECTORY_SEPARATOR.$infile;
		$fh = fopen($infile,"rb");
		$contents = fread($fh, filesize($infile));
		fclose($fh);
		return $contents;
	}
	
	/**
	 * Write output to script
	 *
	 * @param text $header script header text
	 * @param text $content script content text
	 * @param text $footer script footer text
	 * @param string $fname relative path and name of file to write
	 */
	function writeScriptContents($header,$content,$footer,$fname) {
		$fh = fopen($fname,"wb");
		fwrite($fh,$header."\n".$content."\n".$footer);
		fclose($fh);
		@chmod($fname,0646);
	}//end function
	
	/**
	 * generate variable values for scripts
	 *
	 * @param string $scriptName name of script variables are for
	 * @param string $scriptDesc description of script
	 * @param string $subpackage destination subpackage name (phpDocumentor usage)
	 * @access private
	 * @return array populated script variables
	 */
	function genScriptVars($scriptName,$scriptDesc,$subpackage) {
		/**
		 * @global this module configuration
		 */
		global $xoopsModuleConfig;
		
		//get the module id
		$modid = $this->getVar('id');
		//get the module tag names
		$tag = strtoupper($this->getVar('modtag'));
		$ltag = strtolower($tag);
		
		include XBS_MODGEN_SCRIPTPATH.DIRECTORY_SEPARATOR."licenses.inc";
		//xoops_version config items
		$cfgHandler =& xoops_getmodulehandler("XBS_MODGENConfig");
		$cfgs = $cfgHandler->getAllConfigs($modid);
		$c = 0;
		$cfgline="";
		$cfgDef = '';
		
		foreach ($cfgs as $cfg) {
			$cfgline .= "\$modversion['config'][$c]['name'] = '".$ltag."_cfg".$c."';\n";
			$cfgline .= "\$modversion['config'][$c]['title'] = '_MI_".$tag."_CFG".$c."NAME';\n";
			$cfgline .= "\$modversion['config'][$c]['description'] = '_MI_".$tag."_CFG".$c."DESC';\n";
			$cfgline .= "\$modversion['config'][$c]['formtype'] = XOBJ_DTYPE_".$cfg->getVar('configformtype').";\n";
			$cfgline .= "\$modversion['config'][$c]['valuetype'] = '".$cfg->getVar('configvaltype')."';\n";
			$cfgline .= "\$modversion['config'][$c]['default'] = '".$cfg->getVar('configdefault')."';\n";
			$cfgline .= "\$modversion['config'][$c]['options'] = '".$cfg->getVar('configoptions')."';\n\n";
			
			$cfgDef .= "define('_MI_".$tag."_CFG".$c."NAME','".$cfg->getVar('configname')."');\n";
			$cfgDef .= "define('_MI_".$tag."_CFG".$c."DESC','".$cfg->getVar('configdesc')."');\n";
			
			$c++;
		}
		
		//-- Objects --
		$objHandler =& xoops_getmodulehandler("XBS_MODGENObject");
		
		//sql tables
		$sqlLine = '';
		$tableLine = '';
		$tableDef = '';
		$numObj = $objHandler->countTypeObjects($modid,'table');
		if ($numObj > 0) {
			$objs =& $objHandler->getTypeObjects($modid,'table');
			$c = 0;
			foreach ($objs as $table) {
				$tableName = $ltag."_".$table->getVar('objname');
				$sqlLine .= preg_replace('/{TABLENAME}/',$tableName,$table->getVar('objoptions'))."\n\n";
				$tableLine .= "\$modversion['tables'][$c] = '$tableName';\n";
				$tableDef .= "/**\n* ".$table->getVar('objname')." table\n*/\ndefine('".$tag."_TBL_".strtoupper($table->getVar('objname'))."','".$tableName."');\n";

				$c++;
			}
		}
		
		//admin menu items
		$amenuLine = '';
		$adminMenuDef = '';
		$numObj = $objHandler->countTypeObjects($modid,'amenu');
		if ($numObj > 0) {
			$objs =& $objHandler->getTypeObjects($modid,'amenu');
			$c = 0;
			foreach ($objs as $menu) {
				$amenuLine .= "\$adminmenu[$c]['title'] = _AM_".$tag."_ADMENU$c;\n";
				$amenuLine .= "\$adminmenu[$c]['link'] = 'admin/admenu$c.php';\n";
				$adminMenuDef .= "define('_AM_".$tag."_ADMENU$c','".$menu->getVar('objname')."');\n";
				$c++;
			}
		}
		
		//user menu items
		$umenuLine = '';
		$defMenu = '';
		$numObj = $objHandler->countTypeObjects($modid,'umenu');
		if ($numObj > 0) {
			$objs =& $objHandler->getTypeObjects($modid,'umenu');
			$c = 0;
			foreach ($objs as $menu) {
				$umenuLine .= "\$modversion['sub'][$c]['name'] = _MI_".$tag."_UMNAME$c;\n";
				$umenuLine .= "\$modversion['sub'][$c]['url'] = 'umenu$c.php';\n";
				$defMenu .= "define('_MI_".$tag."_UMNAME".$c."','".$menu->getVar('objname')."');\n";
				$c++;
			}
		}
		
		//blocks
		$blocks = '';
		$defBlocks = '';
		$numObj = $objHandler->countTypeObjects($modid,'bscript');
		if ($numObj > 0) {
			$objs =& $objHandler->getTypeObjects($modid,'bscript');
			$c = 0;
			foreach ($objs as $blk) {
				$blocks .= "\$modversion['blocks'][$c]['name'] = _MI_".$tag."_BLKNAME$c;\n";
				$blocks .= "\$modversion['blocks'][$c]['description'] = _MI_".$tag."_BLKDESC$c;\n";
				$blocks .= "\$modversion['blocks'][$c]['file'] = 'block$c.php';\n";
				$blocks .= "\$modversion['blocks'][$c]['show_func'] = 'b_".$ltag."_block".$c."_show';\n";
				$blocks .= "\$modversion['blocks'][$c]['edit_func'] = 'b_".$ltag."_block".$c."_edit';\n";
				$blocks .= "\$modversion['blocks'][$c]['template'] = 'b_".$ltag."_block".$c.".tpl';\n";
				//get any block options and retrieve the value parts
				$opts = $blk->getVar('objoptions');
				if (empty($opts)) {
					$opts = '';
				} else {
					$optArr = explode('|',$opts);
					$opts = '';
					foreach ($optArr as $value) {
						$val = explode("=",$value);
						$opts .= $val[1]."|";
					}
					$opts = rtrim($opts,"|");
				}
				$blocks .= "\$modversion['blocks'][$c]['options'] = '$opts';\n";
				$defBlocks .= "define('_MI_".$tag."_BLKNAME".$c."','".$blk->getVar('objname')."');\n";
				$defBlocks .= "define('_MI_".$tag."_BLKDESC".$c."','".$blk->getVar('objdesc')."');\n";
				$c++;
			}
		}
		
		//XBS MetaTags
		$metatagline = '';
		$metatagline .= "\$metatags[$c]['module'] = '".strtoupper($this->getVar('modtag'))."';\n";
		$metatagline .= "\$metatags[$c]['title'] = 'View values for a code set';\n";
		$metatagline .= "\$metatags[$c]['description'] = 'Allow users to review CDM codes by codeset';\n";
		$metatagline .= "\$metatags[$c]['script_name'] = 'index.php';\n";
		$metatagline .= "\$metatags[$c]['keywords'] = '';\n";
		$metatagline .= "\$metatags[$c]['maxkeys'] = 40;\n";
		$metatagline .= "\$metatags[$c]['minkeylen'] = 5;\n";
		$metatagline .= "\$metatags[$c]['config'] = 'mostorder';\n\n";

		
		//construct replacement array
		$repl = array(
		"{!SCRIPTNAME}" => $scriptName,
		"{!DATETIME}" => $this->getCurrentDateTime(),
		"{MODNAME}" => $this->getVar('modname'),
		"{MODDESC}" => $this->getVar('moddesc'),
		"{MODDIR}" => $this->getVar('moddir'),
		"{UMODDIR}" => strtoupper($this->getVar('moddir')),
		"{UMODTAG}" => $tag,
		"{LMODTAG}" => $ltag,
		"{COPYRIGHT}" => date("Y")." ".$xoopsModuleConfig['xbs_modgen_author'].", ".$xoopsModuleConfig['xbs_modgen_country'],
		"{CONTACT}" => $xoopsModuleConfig['xbs_modgen_contact'],
		"{LICENSE}" => $xoopsModuleConfig['xbs_modgen_license'],
		"{LICENSETEXT}" => ($xoopsModuleConfig['xbs_modgen_license']=='GPL'?$gpl:$lgpl),
		"{!SCRIPTDESC}" => $scriptDesc,
		"{AUTHOR}" => $xoopsModuleConfig['xbs_modgen_author'],
		"{AUTHURL}" => $xoopsModuleConfig['xbs_modgen_authurl'],
		"{!PACKAGE}" => $tag,
		"{!SUBPACKAGE}" => $subpackage,
		"{!XCFGTABLES}" => $tableLine,
		"{!XCFGUSERMENU}" => $umenuLine,
		"{!XCFGADMINMENU}" => $amenuLine,
		"{!XCFGCONFIG}" => $cfgline,
		"{HASUSERMENU}" => $this->getVar('hasuserside'),
		"{HASADMINMENU}" => $this->getVar('hasadmin'),
		"{HASSEARCH}" => $this->getVar('hassearch'),
		"{HASCOMMENTS}" => $this->getVar('hascomments'),
		"{HASNOTIFY}" => $this->getVar('hasnotification'),
		"{!METATAGS}" => $metatagline,
		"{!SQL}" => $sqlLine,
		"{!DEFTABLES}" => $tableDef,
		"{!DEFADMMENU}" => $adminMenuDef,
		"{!YEAR}" => date("Y"),
		"{!DEFCONFIG}" => $cfgDef,
		"{!DEFMENU}" => $defMenu,
		"{!XCFGBLOCKS}" => $blocks,
		"{!DEFBLOCKS}" => $defBlocks
		);
		
		return $repl;
	}
	
	/**
	 * Change script specific values for replacement variable array
	 *
	 * @param @array $vars Handle to replacement array
	 * @param string $scriptName name of script variables are for
	 * @param string $scripDesc description of script
	 * @param string $subpackage destination subpackage name (phpDocumentor usage)
	 * @param int $counter a number counter
	 * @access private
	 * @return array populated script variables
	 */
	function genChangeVars(&$vars,$scriptName,$scriptDesc,$subpackage,$counter = 0) {
		$vars['{!SCRIPTNAME}'] = $scriptName;
		$vars['{!SCRIPTDESC}'] = $scriptDesc;
		$vars['{!SUBPACKAGE}'] = $subpackage;
		$vars['{!COUNTER}'] = $counter;
	}
	/**
	 * Replace script variables with actual values
	 *
	 * @param text $content script raw text
	 * @param array $vars replacement values
	 * @return string instantiated script text
	 * @access private
	 */
	function genReplaceVars($content,$vars) {
		$search = array();
		$replace = array();
		foreach ($vars as $key => $value) {
			$search[] = "/$key/";
			$replace[] = $value;
		}
		return preg_replace($search,$replace,$content);
	}//end function
	
	/**
	 * generate header of a script
	 * 
	 * @param array $repl Replacement script variable array
	 * @access private
	 * @return string header text
	 */
	function genHeader($repl) {
		$contents = $this->getScriptContents("scriptheader.scr");
		return $this->genReplaceVars($contents,$repl);
	}//end function
	
	/**
	 * generate footer of script
	 * @return string footer text
	 * @access private
	 */
	function genFooter() {
		return "/*\n * This file was generated by XBS ModGen, (c) 2006 A Kitson, UK. See http://xoobs.net\n * ModGen is a Module Code Generator for the Xoops CMS.  See http://xoops.org\n */\n?>";
	}//end function
	
	/**
	 * Generate module scripts
	 *
	 */
	function generate() {
		/**
		 * @global module configuration
		 */
		global $xoopsModuleConfig;
		/**
		 * @global Xoops database object
		 */
		global $xoopsDB;
		
		//check for script target directory and create if not already existing
		$targetDir = $this->getVar('modtargetdir').DIRECTORY_SEPARATOR.$this->getVar('moddir');
		if (is_dir($this->getVar('modtargetdir'))) {
			if (!is_dir($targetDir)) {
				//create directory
				if (!mkdir($targetDir,0757)) {
					return 2; //unable to create directory
				}
			}
			//find language name
			$sql = "select conf_id from ".$xoopsDB->prefix('config')." where conf_name = 'xbs_modgen_lang'";
			if ($result = $xoopsDB->query($sql)) {
				$ret = $xoopsDB->fetchArray($result);
				$sql = "select confop_name from ".$xoopsDB->prefix('configoption')." where conf_id = ".$ret['conf_id']." and confop_value = ".$xoopsDB->quoteString($xoopsModuleConfig['xbs_modgen_lang']);
				if ($result = $xoopsDB->query($sql)) {
					$ret = $xoopsDB->fetchArray($result);
					$ret = explode(' ',$ret['confop_name']);
					$lang = strtolower($ret[count($ret)-1]);
				} else {
					$lang = 'english'; //default value
				}
			}
			
			//create subdirectories
			@mkdir($targetDir.DIRECTORY_SEPARATOR."admin",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."images",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."blocks",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."class",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."docs",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."include",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."images",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."shots",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."language",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."language".DIRECTORY_SEPARATOR.$lang,0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."sql",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."templates",0757);
			@mkdir($targetDir.DIRECTORY_SEPARATOR."templates".DIRECTORY_SEPARATOR."blocks",0757);
			
			//module objecthandler
			$objHandler =& xoops_getmodulehandler("XBS_MODGENObject");
			
			/* Script generation - root directory */
			$footer = $this->genFooter();
			$replVars = $this->genScriptVars("xoops_version.php",_AM_XBS_MODGEN_SCR_XVERDESC,"Installation");
			
			//xoops_version.php
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("xoops_version.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR."xoops_version.php");
			
			//metatags_info.php
			$this->genChangeVars($replVars,"metatags_info.php",_AM_XBS_MODGEN_SCR_MTAGDESC,"Installation");
			$content = $this->genReplaceVars($this->getScriptContents("metatags_info.scr"),$replVars);
			$this->writeScriptContents("",$content,$footer,$targetDir.DIRECTORY_SEPARATOR."metatags_info.php");
			
			//install_funcs.php
			$this->genChangeVars($replVars,"install_funcs.inc",_AM_XBS_MODGEN_SCR_INSTDESC,"Installation");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("install_funcs.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR."install_funcs.inc");
			
			//header.inc
			$this->genChangeVars($replVars,"header.inc",_AM_XBS_MODGEN_SCR_HEADDESC,"Main");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("header.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR."header.inc");
			
			//If there is a userside for the module then create an index.php file
			if (intval($this->getVar('hasuserside'))==1) {
				$this->genChangeVars($replVars,"index.php",_AM_XBS_MODGEN_SCR_UINDXDESC,"User_Function");
				$header = $this->genHeader($replVars);
				$content = $this->genReplaceVars($this->getScriptContents("umenu.scr"),$replVars);
				$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR."index.php");
			}
			//user menu scripts - one per option
			if ($objHandler->countTypeObjects($this->getVar('id'),'umenu') > 0) {
				$objs =& $objHandler->getTypeObjects($this->getVar('id'),'umenu');
				$c = 0;
				foreach ($objs as $menu) {
					$menuName = "umenu$c.php";
					$this->genChangeVars($replVars,$menuName,sprintf(_AM_XBS_MODGEN_SCR_UMENUDESC,$menu->getVar('objdesc')),"User_Function");
					$header = $this->genHeader($replVars);
					$content = $this->genReplaceVars($this->getScriptContents("umenu.scr"),$replVars);
					$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR.$menuName);
					$c++;
				}
			}//end if

			//block scripts - one per block definition
			// also block template - one per block definition
			if ($objHandler->countTypeObjects($this->getVar('id'),'bscript') > 0) {
				$objs =& $objHandler->getTypeObjects($this->getVar('id'),'bscript');
				$c = 0;
				foreach ($objs as $block) {
					//block script
					$blockName = "block$c.php";
					$this->genChangeVars($replVars,$blockName,sprintf(_AM_XBS_MODGEN_SCR_BLOCKDESC,$block->getVar('objdesc')),"Blocks",$c);
					$header = $this->genHeader($replVars);
					$content = $this->genReplaceVars($this->getScriptContents("block.scr"),$replVars);
					$this->writeScriptContents($header,$content,$footer,$targetDir.DIRECTORY_SEPARATOR."blocks".DIRECTORY_SEPARATOR.$blockName);
					//block template
					$content = $this->genReplaceVars($this->getScriptContents("mytemplate.scr"),$replVars);
			$this->writeScriptContents("",$content,"",$targetDir.DIRECTORY_SEPARATOR."templates".DIRECTORY_SEPARATOR."blocks".DIRECTORY_SEPARATOR."b_".strtolower($this->getVar("modtag"))."_block".$c.".tpl");
					$c++;
				}
			}//end if
			
			/* Script generation - sql directory */
			//$this->genChangeVars($replVars,'','','');
			$content = $this->genReplaceVars($this->getScriptContents("sql.scr"),$replVars);
			$content = preg_replace("/<br \/>/","\n",$content);
			$content = preg_replace("/&#039;/","'",$content);
			$this->writeScriptContents('',$content,'',$targetDir.DIRECTORY_SEPARATOR."sql".DIRECTORY_SEPARATOR.$replVars['{LMODTAG}'].'_mysql.sql');
			
			/* Script generation - language directory */
			$langDir = $targetDir.DIRECTORY_SEPARATOR."language".DIRECTORY_SEPARATOR.$lang.DIRECTORY_SEPARATOR;
			
			//admin.php
			$this->genChangeVars($replVars,"admin.php",_AM_XBS_MODGEN_SCR_ADMINDESC,"Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("admin.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$langDir."admin.php");
			
			//admin2.php
			$this->genChangeVars($replVars,"admin2.php",_AM_XBS_MODGEN_SCR_ADMIN2DESC,"Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->getScriptContents("admin2.scr");
			$this->writeScriptContents($header,$content,$footer,$langDir."admin2.php");
			
			//main.php
			$this->genChangeVars($replVars,"main.php","","Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("main.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$langDir."main.php");
			
			//modinfo.php
			$this->genChangeVars($replVars,"modinfo.php","","Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("modinfo.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$langDir."modinfo.php");
			
			//blocks.php
			$this->genChangeVars($replVars,"blocks.php","","Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("blocklang.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$langDir."blocks.php");
			
			/* Script generation - include directory */
			$incDir = $targetDir.DIRECTORY_SEPARATOR."include".DIRECTORY_SEPARATOR;
			//defines.inc
			$this->genChangeVars($replVars,"defines.inc",_AM_XBS_MODGEN_SCR_DEFINESDESC,"Definitions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("defines.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$incDir."defines.inc");
			
			//functions.inc
			$this->genChangeVars($replVars,"functions.inc",_AM_XBS_MODGEN_SCR_UFUNCDESC,"API_Functions");
			$header = $this->genHeader($replVars);
			$content = $this->getScriptContents("ufunctions.scr");
			$this->writeScriptContents($header,$content,$footer,$incDir."functions.inc");
			
			//notification.inc
			$this->genChangeVars($replVars,"notification.inc",_AM_XBS_MODGEN_SCR_NOTIFYDESC,"Xoops_Integration");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("notification.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$incDir."notification.inc");
			
			//comments.inc
			$this->genChangeVars($replVars,"comments.inc",_AM_XBS_MODGEN_SCR_COMMENTSDESC,"Xoops_Integration");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("comments.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$incDir."comments.inc");
			
			//search.inc
			$this->genChangeVars($replVars,"search.inc",_AM_XBS_MODGEN_SCR_SEARCHDESC,"Xoops_Integration");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("search.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$incDir."search.inc");
			
			/* Script generation - admin directory */
			$adminDir = $targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR;
			//adminindex.php
			if ($this->getVar('hasadmin')==1) {
				$this->genChangeVars($replVars,"adminindex.php",_AM_XBS_MODGEN_SCR_AINDXDESC,"Admin");
				$header = $this->genHeader($replVars);
				$content = $this->genReplaceVars($this->getScriptContents("adminindex.scr"),$replVars);
				$this->writeScriptContents($header,$content,$footer,$adminDir."adminindex.php");
			}
			
			//menu.inc
			$this->genChangeVars($replVars,"menu.inc",_AM_XBS_MODGEN_SCR_AMENUDESC,"Admin");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("menu.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$adminDir."menu.inc");
			
			//functions.inc
			$this->genChangeVars($replVars,"functions.inc",_AM_XBS_MODGEN_SCR_AFUNCDESC,"API_Functions");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("afunctions.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$adminDir."functions.inc");
			
			//adminmenus - one per option
			if ($objHandler->countTypeObjects($this->getVar('id'),'amenu') > 0) {
				$objs =& $objHandler->getTypeObjects($this->getVar('id'),'amenu');
				$c = 0;
				foreach ($objs as $menu) {
					$menuName = "admenu$c.php";
					$this->genChangeVars($replVars,$menuName,sprintf(_AM_XBS_MODGEN_SCR_AMENU2DESC,$menu->getVar('objdesc')),"Admin_Function",$c);
					$header = $this->genHeader($replVars);
					$content = $this->genReplaceVars($this->getScriptContents("amenu.scr"),$replVars);
					$this->writeScriptContents($header,$content,$footer,$adminDir.$menuName);
					$c++;
				}
			}//end if
			
			//help.php
			$this->genChangeVars($replVars,"help.php",_AM_XBS_MODGEN_SCR_HELPDESC,"Help");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("help.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$adminDir."help.php");
			
			//adminheader.inc
			$this->genChangeVars($replVars,"adminheader,inc",_AM_XBS_MODGEN_SCR_ADHEADDESC,"Admin");
			$header = $this->genHeader($replVars);
			$content = $this->genReplaceVars($this->getScriptContents("adminheader.scr"),$replVars);
			$this->writeScriptContents($header,$content,$footer,$adminDir."adminheader.inc");
			
			//mytemplate.tpl
			$content = $this->genReplaceVars($this->getScriptContents("mytemplate.scr"),$replVars);
			$this->writeScriptContents("",$content,"",$targetDir.DIRECTORY_SEPARATOR."templates".DIRECTORY_SEPARATOR."mytemplate.tpl");
				
			/* Copy standard files */
			//logo
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."slogo.png",$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR.$replVars['{LMODTAG}']."_slogo.png");
			@chmod($targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR.$replVars['{LMODTAG}']."_slogo.png",0646);
			
			//admin images
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."left_both.gif",$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."left_both.gif");
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."right_both.gif",$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."right_both.gif");
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."bg.gif",$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."bg.gif");
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."left_both.gif",$targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."left_both.gif");
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."right_both.gif",$targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."right_both.gif");
			copy("..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."bg.gif",$targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."bg.gif");
			
			//index.html to every directory
			$ifname = "..".DIRECTORY_SEPARATOR."resources".DIRECTORY_SEPARATOR."index.html";
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."admin".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."blocks".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."class".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."docs".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."include".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."images".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$langDir."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."language".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."sql".DIRECTORY_SEPARATOR."index.html");
			copy($ifname,$targetDir.DIRECTORY_SEPARATOR."templates".DIRECTORY_SEPARATOR."index.html");
			if (intval($this->getVar('hasuserside'))!=1) {
				copy($ifname,$targetDir.DIRECTORY_SEPARATOR."index.html");
			}
			
		} else {
			return 1; //no target directory
		}
		return 0; //All OK
	}//end function
}//end class

/**
 * Data container class for a Modgen Configuration Record
 * 
 * @package XBS_MODGEN
 * @subpackage Base
 * @access public
 *
 */
class xbs_modgen_Config extends ModgenObject {
	function xbs_modgen_Config() {
		$this->initVar('modid',XOBJ_DTYPE_INT,null,true,null,null,_AM_XBS_MODGEN_TBL_CFGMODID,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
		$this->initVar('id',XOBJ_DTYPE_INT,null,true,null,null,_AM_XBS_MODGEN_TBL_CFGID,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
		$this->initVar('configname',XOBJ_DTYPE_TXTBOX,null,true,30,null,_AM_XBS_MODGEN_TBL_CFGNAME,XBS_FRM_TEXTBOX,'30',XBS_PAT_TEXT);
		$this->initVar('configdesc',XOBJ_DTYPE_TXTBOX,null,false,255,null,_AM_XBS_MODGEN_TBL_CFGDESC,XBS_FRM_TEXTBOX,'50',XBS_PAT_TEXT);
		$this->initVar('configformtype',XOBJ_DTYPE_TXTBOX,'TXTBOX',true,6,null,_AM_XBS_MODGEN_TBL_CFGFTYPE,XBS_FRM_CDMSELECT,'XOBJDTYPE,1,EN,cd_value');
		$this->initVar('configvaltype',XOBJ_DTYPE_TXTBOX,'text',true,6,null,_AM_XBS_MODGEN_TBL_CFGFVAL,XBS_FRM_CDMSELECT,'XOBJVTYPE,1,EN,cd_value');
		$this->initVar('configlen',XOBJ_DTYPE_INT,'30',false,3,null,_AM_XBS_MODGEN_TBL_CFGFLEN,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
		$this->initVar('configdefault',XOBJ_DTYPE_TXTBOX,null,false,60,null,_AM_XBS_MODGEN_TBL_CFGFDEF,XBS_FRM_TEXTBOX,'30',null);
		$this->initVar('configoptions',XOBJ_DTYPE_TXTAREA,null,false,null,null,_AM_XBS_MODGEN_TBL_CFGFOPT,XBS_FRM_TEXTAREA,'5,50',null);

		parent::ModgenObject();
	}//end function
}//end class

/**
 * Data container class for a Modgen Object
 * 
 * @package XBS_MODGEN
 * @subpackage Base
 * @access public
 *
 */
class xbs_modgen_Object extends ModgenObject {
	/**
	 * constructor
	 *
	 * @return xbs_modgen_Object
	 */
	function xbs_modgen_Object() {
		//objects don't have form field names set here as they are set 
		//dynamically for each usage of the the object
		$this->initVar('modid',XOBJ_DTYPE_INT,null,true,null,null,null,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
		$this->initVar('id',XOBJ_DTYPE_INT,null,true,null,null,null,XBS_FRM_TEXTBOX,'10',XBS_PAT_INT);
  		$this->initVar('objtype',XOBJ_DTYPE_TXTBOX,null,true,10,null,null,XBS_FRM_CDMSELECT,'XOBJOTYPE,1,EN,cd_value','/^(u|b|a)(script|tpl)|doc(help|install|system)|table|(u|a)menu$/');
  		$this->initVar('objname',XOBJ_DTYPE_TXTBOX,null,true,30,null,null,XBS_FRM_TEXTBOX,'30',null);
  		$this->initVar('objdesc',XOBJ_DTYPE_TXTAREA,null,false,255,null,null,XBS_FRM_TEXTAREA,'5,50',XBS_PAT_TEXT);
  		$this->initVar('objloc',XOBJ_DTYPE_TXTBOX,null,true,30,null,null,XBS_FRM_TEXTBOX,'30', "/^\/[._a-zA-Z\/]*$/");
  		$this->initVar('objoptions',XOBJ_DTYPE_TXTAREA,null,false,null,null,null,XBS_FRM_TEXTAREA,'5,50');
		parent::ModgenObject();
	}//end function
	
	/**
	 * Set form names for object
	 *
	 * @param array $fNames array of names for each form field to display in format (fld => fldName..)
	 */
	function useFormNames($fNames) {
		foreach ($fNames as $key => $value) {
			$this->vars[$key]['frmName'] = $value;
		}
	}//end function
}//end class

/**
 * Object handler for xbs_modgen objects
 *
 * @package XBS_MODGEN
 * @subpackage Base
 * @abstract 
 */

class xbs_modgen_BaseHandler extends XoopsObjectHandler {

  // Public Variables
  /**
   * Set in descendent constructor to name of object that this handler handles
   * @var string 
   */
  var $classname; 
  /**
   * Set in ancestor to name of unique ID generator tag for use with insert function
   * @var string
   */
  var $ins_tagname;
   
  
  // Private variables 
  /**
  * most recent error number
  * @access private
  * @var int
  */
  var $_errno = 0;  
  /**
  * most recent error string
  * @access private
  * @var string
  */
  var $_error = ''; 
  

  /**
   * Constructor
   *
   * @param  xoopsDatabase &$db handle for xoops database object
   */
  function xbs_modgen_BaseHandler(&$db) {
    $this->xoopsObjectHandler($db);
  }

  /**
   * Set error information
   *
   * @param int $errnum=0 Error number
   * @param string $errstr='' Error Message
   */
  function setError($errnum = 0,$errstr = '') {
    $this->_errno = $errnum;
    $this->_error = $errstr;
  }
  
  /**
  * Return last error number
  *
  * @return int
  */
  function errno() {
    return $this->_errno;
  }
  
  /**
  * Return last error message
  *
  * @return  string
  */
  function error() {
    return $this->_error;
  }

  /**
  * return last error number and message
  *
  * @return string
  */
  function getError() {
    $e = "Error No ".strval($this->_errno)." - ".$this->_error;
    return $e;
  }

  /**
   * Must be overidden in ancestor to return a new object of the required kind 
   *
   * @abstract 
   * @return  object or False if no object created
   */
  function &_create() {
    //return new object() - descendent of XoopsObject
    return false;
  }

  /**
  * Create a new object
  *
  * Relies on _create to create the actual object
  *
  * @param boolean $isNew=true create a new object and tell it is new.  If False then create object but set it as not new
  * @return object else False if failure
  */
  function &create($isNew = true) {
    $obj =& $this->_create();
    if ($isNew && $obj) { //if it is new and the object was created
      $obj->setNew();
      $obj->unsetDirty();
    } else {
      if ($obj) {         //it is not new (forced by caller, usually &getall()) but obj was created
	$obj->unsetNew();
	$obj->unsetDirty();
      } else {
	$this->setError(-1,sprintf(_MD_xbs_modgen_ERR_2,$classname));
	return FALSE;      //obj was not created so return False to caller.
      }
    }
    return $obj;
  }// end create function

  /**
   * Get data from the database and create a new object with it
   *
   * Abstract method. Overide in ancestor and supply the sql string to get the data
   *
   * @abstract 
   * @param   int $id internal id of the object. Internal code is a unique int value. 
   * @return  string SQL string to get data
   */
  function &_get($id) { //overide in ancestor and supply the sql string to get the data
    return '';
  }

  /**
  * Get data for object given id.
  *
  * @param  int $id data item internal identifier
  * @return object 
  */
  function &get($id) {
    $test = (is_int($id) ? ($id > 0 ? TRUE : FALSE) : !empty($id) ? TRUE : FALSE); //test validity of id
    //    $id = intval($id);
    if ($test) {
      $obj =& $this->create(FALSE);
      if ($obj) {
	$sql = $this->_get($id);

	if ($result = $this->db->query($sql)) {
	  if ($this->db->getRowsNum($result)==1) {
	    $obj->assignVars($this->db->fetchArray($result));
	    return $obj;
	  } else {
	    $this->setError(-1,sprintf(_MD_xbs_modgen_ERR_1,strval($id)));
	  }
	} else {
	  $this->setError($this->db->errno(),$this->db->error());
	}//end if
      }//end if - error value set in call to create()
    } else {
      $this->setError(-1,sprintf(_MD_xbs_modgen_ERR_1,strval($id)));
    }//end if
    return false; //default return
  }//end function &get

  /**
   * Get internal identifier (primary key) based on user visible code 
   *
   * overide in ancestor to return the identifier
   *
   * @abstract 
   * @param mixed Dependent on descendent class
   * @return object of required type
   */
  function getKey() {
    return null;
  }

  /**
   * OVERIDE in ancestor to provide an INSERT string for insert function
   *
   * Use the following construct inside your descendent to get data for the
   * SQL string
   * <code>
   * extract($cleanVars);
   * </code>
   * @abstract 
   * @param $cleanVars array of key=>value pairs of data for insert string
   * @return string SQL string to insert object data into database
   * 
   */
  function _ins_insert($cleanVars) {
    return '';
  }

  /**
   * OVERIDE in ancestor to provide an UPDATE string for insert function
   *
   * Use the following construct inside your descendent to get data for the
   * SQL string
   * <code>
   * extract($cleanVars);
   * </code>
   * @abstract 
   * @param $cleanVars array of key=>value pairs of data for insert string
   * @return string SQL string to update object data into database
    */
  function _ins_update($cleanVars) {
    return '';
  }

  /**
   * Write an object back to the database
   *
   * Overide in ancestor only if you need to add extra process
   * before or after the insert.
   *
   * @param   xbs_modgenObject &$obj   reference to a xbs_modgen object
   * @return  bool             True if successful
   */

  function insert(&$obj) {
    if (!$obj->isDirty()) { return true; }    // if data is untouched then don't save
    // Set default values
   $obj->setRowInfo(); //set row edit infos ** you MUST call this prior to an update and prior to cleanVars**

   if ($obj->isNew()) {    
      $obj->setVar('row_flag',xbs_modgen_RSTAT_ACT); //its a new code so it is 'Active'
      //next line not really required for mysql, but left in for future compatibility
      $obj->setVar('id',$this->db->genId($this->ins_tagname));
   }
    // set up 'clean' 2 element array of data items k=>v
    if (!$obj->cleanVars()) { return false; } 
    //get the sql for insert or update
    $sql = ($obj->isNew() ? $this->_ins_insert($obj->cleanVars) : $this->_ins_update($obj->cleanVars));
    if(!$result = $this->db->queryF($sql)) {
      $this->setError($this->db->errno(),$this->db->error());
      return false; 
    } else {
      $obj->unsetDirty(); //It has been saved so now it is clean
    }

    if ($obj->isNew()) { //retrieve the new internal id for the code and store
      $id = $this->db->getInsertId(); 
      $obj->setVar('id',$id);
      $obj->unsetNew();  //it's been saved so it's not new anymore
    }
  
    return true;
  }//end function insert

  
  /**
   * return SQL string to delete object from database
   * 
   * OVERIDE in ancestor to provide an UPDATE string for insert function
   * Use the following construct inside your descendent to get data for the
   * SQL string
   * <code>
   * extract($cleanVars);
   * </code>
   * 
   * @abstract 
   * @param $cleanVars array of key=>value pairs of data for insert string
   * @return string SQL string to update object data into database
   */
  function _delete($cleanVars) {
  	return '';	
  }//end function
  
  /**
   * Delete object from the database
   * 
   * @param xbs_modgenObject    Object to delete
   * @return bool TRUE on success else False
   */
  function delete(&$obj) {
  	if (!$obj->cleanVars()) return false;
  	$sql = $this->_delete($obj->cleanVars);
    if(!$this->db->queryF($sql)) {
      $this->setError($this->db->errno(),$this->db->error());
      return false; 
    } else {
      return true;
    }
  }//end function

} //end of class xbs_modgen_BaseHandler
?>