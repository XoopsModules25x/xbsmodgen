<?php declare(strict_types=1);

namespace XoopsModules\Xbsmodgen;

use XoopsModules\Xbscdm;

/*  XBS Modgen Module shell generator for Xoops CMS
    Copyright (C) 2006 Ashley Kitson, UK
    admin at xoobs dot net

    This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*/
/**
 * XBS Modgen Module shell generator for Xoops CMS
 *
 * Base class definitions
 *
 * @author     Ashley Kitson (http://xoobs.net)
 * @copyright  2006 Ashley Kitson, UK
 * @package    XBS_MODGEN
 * @subpackage Base
 * @access     public
 */
/**
 * Require CDM objects so we can extend them
 */


/**
 * Module generator Object
 *
 * Object for a module to be generated by ModGen
 *
 * @author     Ashley Kitson http://akitson.bbcb.co.uk
 * @copyright  2006 Ashley Kitson, UK
 * @package    XBS_MODGEN
 * @subpackage Base
 * @version    1
 */
class ModgenObject extends Xbscdm\BaseObject
{
    /**
     * Constructor
     *
     * Overide CDMBaseObject constructor because of new initvar
     */
    public function __construct()
    {
        //NB if we set row_dt as XOBJ_DTYPE_?TIME it will get converted

        // to unix datetime number format which will not work for the

        // timestamp format of the underlying data column type in mysql

        // so we set it to _OTHER so it gets left alone by cleanVars()

        $this->initVar('row_flag', XOBJ_DTYPE_OTHER, null, true, null, null, null, null, null, null);

        $this->initVar('row_uid', XOBJ_DTYPE_INT, null, true, null, null, null, null, null, null);

        $this->initVar('row_dt', XOBJ_DTYPE_OTHER, null, true, null, null, null, null, null, null);

        parent::__construct(); //call ancestor constructor
    }

    /**
     * initialize variables for the object
     *
     * Extend Ancestor to add data for form edit display
     *
     * @access public
     * @param string $key
     * @param int    $data_type     set to one of XOBJ_DTYPE_XXX constants (set to XOBJ_DTYPE_OTHER if no data type ckecking nor text sanitizing is required)
     * @param null   $value
     * @param bool   $required      require html form input?
     * @param int    $maxlength     for XOBJ_DTYPE_TXTBOX type only
     * @param string $options
     * @param string $frmName       Name of field on a form
     * @param string $frmType       Type of field on form, one of XBS_FRM_.. constants
     * @param string $frmParams     Additional parameters for form type.
     *                              frmType = XBS_FRM_DATETIME then = fld size
     *                              frmType = XBS_FRM_PASSWORD then = fld size
     *                              frmType = XBS_FRM_SELECT then = list size,multiple select eg 1,false
     *                              frmType = XBS_FRM_TEXTBOX then = fld size
     *                              frmType = XBS_FRM_TEXTAREA then = numRows,numCols e.g. 5,50
     *                              frmType = XBS_FRM_CDMSELECT then = SetName,NumRows,LangCode,DispField e.g. MYCODES,1,EN,cd_value
     *                              frmType = XBS_FRM_CDMCOUNTRY then = numRows,LangCode e.g. 1,EN
     *                              frmType = XBS_FRM_CDMCURRENCY then = numRows,LangCode e.g. 1,EN
     *                              frmType = XBS_FRM_CDMLANGUAGE then = numRows,LangCode e.g. 1,EN
     * @param string $frmValPattern regular expression to validate variable value against e.g. '/\bam[0-9]+/'
     */
    public function initVar($key, $data_type, $value = null, $required = false, $maxlength = null, $options = '', $frmName = null, $frmType = null, $frmParams = null, $frmValPattern = null)
    {
        parent::initVar($key, $data_type, $value, $required, $maxlength, $options);

        $this->vars[$key]['frmName'] = $frmName;

        $this->vars[$key]['frmType'] = $frmType;

        $this->vars[$key]['frmParams'] = $frmParams;

        $this->vars[$key]['frmValPattern'] = $frmValPattern;
    }

    /**
     * Check variables against patterns to make sure it is valid input
     * Creates error messages that are retrieved by getErrors() or getHtmlErrors()
     *
     * @return bool True if all OK else false
     */
    public function validateData()
    {
        $ret = true;

        $vars = $this->getVars();

        foreach ($vars as $key => $var) {
            if (null != $var['frmValPattern']) {
                if (!preg_match($var['frmValPattern'], $var['value'])) {
                    $ret = false;

                    $this->setErrors(sprintf(_AM_XBSMODGEN_ADMINERR2, $key, $var['value'], $var['frmValPattern'], get_class($this)));
                }
            }
        }//end foreach

        return $ret;
    }
    //end function
}//end class
